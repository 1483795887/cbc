/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package com.cheng.cbc.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

    /**
     * End of File.
     */
    int EOF = 0;
    /**
     * RegularExpression Id.
     */
    int SPACES = 1;
    /**
     * RegularExpression Id.
     */
    int LINE_COMMENT = 2;
    /**
     * RegularExpression Id.
     */
    int UNSIGNED = 6;
    /**
     * RegularExpression Id.
     */
    int VOID = 7;
    /**
     * RegularExpression Id.
     */
    int CHAR = 8;
    /**
     * RegularExpression Id.
     */
    int SHORT = 9;
    /**
     * RegularExpression Id.
     */
    int INT = 10;
    /**
     * RegularExpression Id.
     */
    int LONG = 11;
    /**
     * RegularExpression Id.
     */
    int IMPORT = 12;
    /**
     * RegularExpression Id.
     */
    int STATIC = 13;
    /**
     * RegularExpression Id.
     */
    int STRUCT = 14;
    /**
     * RegularExpression Id.
     */
    int TYPEDEF = 15;
    /**
     * RegularExpression Id.
     */
    int IF = 16;
    /**
     * RegularExpression Id.
     */
    int ELSE = 17;
    /**
     * RegularExpression Id.
     */
    int WHILE = 18;
    /**
     * RegularExpression Id.
     */
    int DO = 19;
    /**
     * RegularExpression Id.
     */
    int FOR = 20;
    /**
     * RegularExpression Id.
     */
    int SIZEOF = 21;
    /**
     * RegularExpression Id.
     */
    int RETURN = 22;
    /**
     * RegularExpression Id.
     */
    int BREAK = 23;
    /**
     * RegularExpression Id.
     */
    int CONTINUE = 24;
    /**
     * RegularExpression Id.
     */
    int INTEGER = 25;
    /**
     * RegularExpression Id.
     */
    int IDENTIFIER = 26;
    /**
     * RegularExpression Id.
     */
    int STRING = 31;
    /**
     * RegularExpression Id.
     */
    int CHARACTER = 36;

    /**
     * Lexical state.
     */
    int DEFAULT = 0;
    /**
     * Lexical state.
     */
    int IN_BLOCK_COMMENT = 1;
    /**
     * Lexical state.
     */
    int IN_STRING = 2;
    /**
     * Lexical state.
     */
    int IN_CHAR = 3;
    /**
     * Lexical state.
     */
    int CHARACTER_TERM = 4;

    /**
     * Literal token values.
     */
    String[] tokenImage = {
            "<EOF>",
            "<SPACES>",
            "<LINE_COMMENT>",
            "\"/*\"",
            "<token of kind 4>",
            "\"*/\"",
            "\"unsigned\"",
            "\"void\"",
            "\"char\"",
            "\"short\"",
            "\"int\"",
            "\"long\"",
            "\"import\"",
            "\"static\"",
            "\"struct\"",
            "\"typedef\"",
            "\"if\"",
            "\"else\"",
            "\"while\"",
            "\"do\"",
            "\"for\"",
            "\"sizeof\"",
            "\"return\"",
            "\"break\"",
            "\"continue\"",
            "<INTEGER>",
            "<IDENTIFIER>",
            "\"\\\"\"",
            "<token of kind 28>",
            "<token of kind 29>",
            "<token of kind 30>",
            "\"\\\"\"",
            "\"\\\'\"",
            "<token of kind 33>",
            "<token of kind 34>",
            "<token of kind 35>",
            "\"\\\'\"",
            "\"[\"",
            "\"]\"",
            "\"*\"",
            "\";\"",
            "\"{\"",
            "\"}\"",
            "\"(\"",
            "\")\"",
            "\",\"",
            "\"++\"",
            "\"--\"",
            "\".\"",
            "\"->\"",
            "\"+\"",
            "\"-\"",
            "\"!\"",
            "\"~\"",
            "\"&\"",
            "\"/\"",
            "\"%\"",
            "\"<<\"",
            "\">>\"",
            "\"^\"",
            "\"|\"",
            "\">\"",
            "\"<\"",
            "\">=\"",
            "\"<=\"",
            "\"==\"",
            "\"!=\"",
            "\"&&\"",
            "\"||\"",
            "\"?\"",
            "\":\"",
            "\"+=\"",
            "\"-=\"",
            "\"*=\"",
            "\"/=\"",
            "\"%=\"",
            "\"^=\"",
            "\"&=\"",
            "\"|=\"",
            "\"<<=\"",
            "\">>=\"",
            "\"=\"",
            "\"...\"",
    };

}
