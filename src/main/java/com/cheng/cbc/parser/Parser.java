/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
package com.cheng.cbc.parser;

import com.cheng.cbc.ast.*;
import com.cheng.cbc.ast.ExprNode.*;
import com.cheng.cbc.ast.ExprNode.AssignNode.AssignNode;
import com.cheng.cbc.ast.ExprNode.AssignNode.OpAssignNode;
import com.cheng.cbc.ast.ExprNode.LHSNode.*;
import com.cheng.cbc.ast.ExprNode.LiteralNode.IntegerLiteralNode;
import com.cheng.cbc.ast.ExprNode.LiteralNode.StringLiteralNode;
import com.cheng.cbc.ast.ExprNode.UnaryOpNode.PrefixOpNode;
import com.cheng.cbc.ast.ExprNode.UnaryOpNode.SuffixOpNode;
import com.cheng.cbc.ast.ExprNode.UnaryOpNode.UnaryOpNode;
import com.cheng.cbc.ast.StmtNode.*;
import com.cheng.cbc.entity.DefinedFunction;
import com.cheng.cbc.entity.DefinedVariable;
import com.cheng.cbc.entity.Parameter;
import com.cheng.cbc.entity.Params;
import com.cheng.cbc.type.*;
import com.cheng.cbc.utils.TextUtils;

import java.io.Reader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;


public class Parser implements ParserConstants {
    static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;
    static private int[] jj_la1_2;

    static {
        jj_la1_init_0();
        jj_la1_init_1();
        jj_la1_init_2();
    }

    final private int[] jj_la1 = new int[40];
    final private JJCalls[] jj_2_rtns = new JJCalls[15];
    /**
     * Generated Token Manager.
     */
    public ParserTokenManager token_source;
    /**
     * Current token.
     */
    public Token token;
    /**
     * Next token.
     */
    public Token jj_nt;
    SimpleCharStream jj_input_stream;
    private String source;
    private Set<String> knownTypes;
    private int jj_ntk;
    private Token jj_scanpos, jj_lastpos;
    private int jj_la;
    /**
     * Whether we are looking ahead.
     */
    private boolean jj_lookingAhead = false;
    private boolean jj_semLA;
    private int jj_gen;
    private boolean jj_rescan = false;
    private int jj_gc = 0;
    private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
    private int[] jj_expentry;
    private int jj_kind = -1;
    private int[] jj_lasttokens = new int[100];
    private int jj_endpos;
    private boolean trace_enabled;

    public Parser(Reader reader, String source) {
        this(reader);
        this.source = source;
        knownTypes = new HashSet<>();
    }

    /**
     * Constructor with InputStream.
     */
    public Parser(java.io.InputStream stream) {
        this(stream, null);
    }

    /**
     * Constructor with InputStream and supplied encoding
     */
    public Parser(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source = new ParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 40; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor.
     */
    public Parser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new ParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 40; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Constructor with generated Token Manager.
     */
    public Parser(ParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 40; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private static void jj_la1_init_0() {
        jj_la1_0 = new int[]{0xf80, 0x4040, 0x0, 0x0, 0x86000000, 0x0, 0x86200000, 0x0, 0x0, 0x0, 0x86200000, 0x86200000, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x86200000, 0x20000, 0x86200000, 0x86200000, 0x86200000, 0x87f50000, 0x87f50000, 0x2000, 0x0, 0x0, 0x0, 0x0, 0xc000,};
    }

    private static void jj_la1_init_1() {
        jj_la1_1 = new int[]{0x0, 0x0, 0xa0, 0xa0, 0x810, 0x2000, 0x7cc890, 0x3c820, 0x3c820, 0x7cc080, 0x810, 0x7cc890, 0x1800080, 0x1800080, 0xc0000, 0xc0000, 0x6000000, 0x6000000, 0x400000, 0x8000000, 0x10000000, 0xe0000000, 0xe0000000, 0x0, 0x0, 0x0, 0x0, 0x7cc890, 0x0, 0x7cc890, 0x7cc890, 0x7cc890, 0x7cca90, 0x7cca90, 0x0, 0x0, 0x2000, 0x0, 0x2000, 0x0,};
    }

    private static void jj_la1_init_2() {
        jj_la1_2 = new int[]{0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x7, 0x7, 0x8, 0x10, 0x20, 0x1ff80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20000, 0x0, 0x20000, 0x0, 0x0,};
    }

    public Location location(Token token) {
        return new Location(source, token);
    }

    public void addType(String name) {
        knownTypes.add(name);
    }

    public boolean isType(String name) {
        return knownTypes.contains(name);
    }

    final public String name() throws ParseException {
        Token name;
        name = jj_consume_token(IDENTIFIER);
        {
            if ("" != null) return name.image;
        }
        throw new Error("Missing return statement in function");
    }

    final public TypeRef typebase() throws ParseException {
        Token t, name;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case VOID: {
                t = jj_consume_token(VOID);
                {
                    if ("" != null) return new VoidTypeRef(location(t));
                }
                break;
            }
            case CHAR: {
                t = jj_consume_token(CHAR);
                {
                    if ("" != null) return IntegerTypeRef.charRef(location(t));
                }
                break;
            }
            case SHORT: {
                t = jj_consume_token(SHORT);
                {
                    if ("" != null) return IntegerTypeRef.shortRef(location(t));
                }
                break;
            }
            case INT: {
                t = jj_consume_token(INT);
                {
                    if ("" != null) return IntegerTypeRef.intRef(location(t));
                }
                break;
            }
            case LONG: {
                t = jj_consume_token(LONG);
                {
                    if ("" != null) return IntegerTypeRef.longRef(location(t));
                }
                break;
            }
            default:
                jj_la1[0] = jj_gen;
                if (jj_2_1(2)) {
                    t = jj_consume_token(UNSIGNED);
                    jj_consume_token(CHAR);
                    {
                        if ("" != null) return IntegerTypeRef.ucharRef(location(t));
                    }
                } else if (jj_2_2(2)) {
                    t = jj_consume_token(UNSIGNED);
                    jj_consume_token(SHORT);
                    {
                        if ("" != null) return IntegerTypeRef.ushortRef(location(t));
                    }
                } else if (jj_2_3(2)) {
                    t = jj_consume_token(UNSIGNED);
                    jj_consume_token(INT);
                    {
                        if ("" != null) return IntegerTypeRef.uintRef(location(t));
                    }
                } else {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case UNSIGNED: {
                            t = jj_consume_token(UNSIGNED);
                            jj_consume_token(LONG);
                            {
                                if ("" != null) return IntegerTypeRef.ulongRef(location(t));
                            }
                            break;
                        }
                        case STRUCT: {
                            t = jj_consume_token(STRUCT);
                            name = jj_consume_token(IDENTIFIER);
                            {
                                if ("" != null) return new StructTypeRef(location(t), name.image);
                            }
                            break;
                        }
                        default:
                            jj_la1[1] = jj_gen;
                            if (isType(getToken(1).image)) {
                                name = jj_consume_token(IDENTIFIER);
                                {
                                    if ("" != null) return new UserTypeRef(location(name), name.image);
                                }
                            } else {
                                jj_consume_token(-1);
                                throw new ParseException();
                            }
                    }
                }
        }
        throw new Error("Missing return statement in function");
    }

    final public TypeRef typeref() throws ParseException {
        TypeRef ref;
        Token t;
        ref = typebase();
        label_1:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 37:
                case 39: {
                    ;
                    break;
                }
                default:
                    jj_la1[2] = jj_gen;
                    break label_1;
            }
            if (jj_2_4(2)) {
                jj_consume_token(37);
                jj_consume_token(38);
                ref = new ArrayTypeRef(ref);
            } else {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case 37: {
                        jj_consume_token(37);
                        t = jj_consume_token(INTEGER);
                        jj_consume_token(38);
                        long i = TextUtils.getLong(t.image);
                        ref = new ArrayTypeRef(ref, i);
                        break;
                    }
                    case 39: {
                        jj_consume_token(39);
                        ref = new PointerTypeRef(ref);
                        break;
                    }
                    default:
                        jj_la1[3] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        }
        {
            if ("" != null) return ref;
        }
        throw new Error("Missing return statement in function");
    }

    final public TypeNode type() throws ParseException {
        TypeRef ref;
        ref = typeref();
        {
            if ("" != null) return new TypeNode(ref);
        }
        throw new Error("Missing return statement in function");
    }

    final public Slot slot() throws ParseException {
        TypeNode type;
        String name;
        type = type();
        name = name();
        jj_consume_token(40);
        {
            if ("" != null) return new Slot(type, name);
        }
        throw new Error("Missing return statement in function");
    }

    final public List<Slot> memberList() throws ParseException {
        List<Slot> members = new ArrayList<>();
        Slot slot;
        jj_consume_token(41);
        label_2:
        while (true) {
            if (jj_2_5(1)) {
                ;
            } else {
                break label_2;
            }
            slot = slot();
            members.add(slot);
        }
        jj_consume_token(42);
        {
            if ("" != null) return members;
        }
        throw new Error("Missing return statement in function");
    }

    final public StructNode defstruct() throws ParseException {
        List<Slot> members;
        String name;
        Token t;
        t = jj_consume_token(STRUCT);
        name = name();
        members = memberList();
        jj_consume_token(40);
        {
            if ("" != null) return new StructNode(location(t), name, members);
        }
        throw new Error("Missing return statement in function");
    }

    final public ExprNode primary() throws ParseException {
        Token t;
        ExprNode n;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case INTEGER: {
                t = jj_consume_token(INTEGER);
                {
                    if ("" != null) return IntegerLiteralNode.intLiteralNode(location(t), TextUtils.getLong(t.image));
                }
                break;
            }
            case STRING: {
                t = jj_consume_token(STRING);
                {
                    if ("" != null)
                        return StringLiteralNode.stringLiteralNode(location(t), TextUtils.getStringReal(t.image));
                }
                break;
            }
            case CHARACTER: {
                t = jj_consume_token(CHARACTER);
                {
                    if ("" != null) return IntegerLiteralNode.charLiteralNode(location(t), TextUtils.getChar(t.image));
                }
                break;
            }
            case IDENTIFIER: {
                t = jj_consume_token(IDENTIFIER);
                {
                    if ("" != null) return new VariableNode(location(t), t.image);
                }
                break;
            }
            case 43: {
                jj_consume_token(43);
                n = expr();
                jj_consume_token(44);
                {
                    if ("" != null) return n;
                }
                break;
            }
            default:
                jj_la1[4] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public List<ExprNode> args() throws ParseException {
        ExprNode expr;
        List<ExprNode> exprs = new ArrayList<>();
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case SIZEOF:
            case INTEGER:
            case IDENTIFIER:
            case STRING:
            case CHARACTER:
            case 39:
            case 43:
            case 46:
            case 47:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54: {
                expr = expr();
                exprs.add(expr);
                label_3:
                while (true) {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case 45: {
                            ;
                            break;
                        }
                        default:
                            jj_la1[5] = jj_gen;
                            break label_3;
                    }
                    jj_consume_token(45);
                    expr = expr();
                    exprs.add(expr);
                }
                break;
            }
            default:
                jj_la1[6] = jj_gen;
                ;
        }
        {
            if ("" != null) return exprs;
        }
        throw new Error("Missing return statement in function");
    }

    final public ExprNode postfix() throws ParseException {
        ExprNode expr, idx;
        String memb;
        List<ExprNode> args;
        expr = primary();
        label_4:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 37:
                case 43:
                case 46:
                case 47:
                case 48:
                case 49: {
                    ;
                    break;
                }
                default:
                    jj_la1[7] = jj_gen;
                    break label_4;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 46: {
                    jj_consume_token(46);
                    expr = new SuffixOpNode("++", expr);
                    break;
                }
                case 47: {
                    jj_consume_token(47);
                    expr = new SuffixOpNode("--", expr);
                    break;
                }
                case 37: {
                    jj_consume_token(37);
                    idx = expr();
                    jj_consume_token(38);
                    expr = new ArefNode(expr, idx);
                    break;
                }
                case 48: {
                    jj_consume_token(48);
                    memb = name();
                    expr = new MemberNode(expr, memb);
                    break;
                }
                case 49: {
                    jj_consume_token(49);
                    memb = name();
                    expr = new PtrMemberNode(expr, memb);
                    break;
                }
                case 43: {
                    jj_consume_token(43);
                    args = args();
                    jj_consume_token(44);
                    expr = new FuncallNode(expr, args);
                    break;
                }
                default:
                    jj_la1[8] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if ("" != null) return expr;
        }
        throw new Error("Missing return statement in function");
    }

    final public ExprNode unary() throws ParseException {
        ExprNode n;
        TypeNode t;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case 46: {
                jj_consume_token(46);
                n = unary();
                {
                    if ("" != null) return new PrefixOpNode("++", n);
                }
                break;
            }
            case 47: {
                jj_consume_token(47);
                n = unary();
                {
                    if ("" != null) return new PrefixOpNode("--", n);
                }
                break;
            }
            case 50: {
                jj_consume_token(50);
                n = unary();
                {
                    if ("" != null) return new UnaryOpNode("+", n);
                }
                break;
            }
            case 51: {
                jj_consume_token(51);
                n = unary();
                {
                    if ("" != null) return new UnaryOpNode("-", n);
                }
                break;
            }
            case 52: {
                jj_consume_token(52);
                n = unary();
                {
                    if ("" != null) return new UnaryOpNode("!", n);
                }
                break;
            }
            case 53: {
                jj_consume_token(53);
                n = unary();
                {
                    if ("" != null) return new UnaryOpNode("~", n);
                }
                break;
            }
            case 39: {
                jj_consume_token(39);
                n = unary();
                {
                    if ("" != null) return new DereferenceNode(n);
                }
                break;
            }
            case 54: {
                jj_consume_token(54);
                n = unary();
                {
                    if ("" != null) return new AddressNode(n);
                }
                break;
            }
            default:
                jj_la1[9] = jj_gen;
                if (jj_2_6(3)) {
                    jj_consume_token(SIZEOF);
                    jj_consume_token(43);
                    t = type();
                    jj_consume_token(44);
                    {
                        if ("" != null) return new SizeofTypeNode(t);
                    }
                } else {
                    switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                        case SIZEOF: {
                            jj_consume_token(SIZEOF);
                            n = unary();
                            {
                                if ("" != null) return new SizeofExprNode(n);
                            }
                            break;
                        }
                        case INTEGER:
                        case IDENTIFIER:
                        case STRING:
                        case CHARACTER:
                        case 43: {
                            n = postfix();
                            {
                                if ("" != null) return n;
                            }
                            break;
                        }
                        default:
                            jj_la1[10] = jj_gen;
                            jj_consume_token(-1);
                            throw new ParseException();
                    }
                }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExprNode term() throws ParseException {
        ExprNode n;
        TypeNode t;
        if (jj_2_7(2147483647)) {
            jj_consume_token(43);
            t = type();
            jj_consume_token(44);
            n = unary();
            {
                if ("" != null) return new CastNode(t, n);
            }
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case SIZEOF:
                case INTEGER:
                case IDENTIFIER:
                case STRING:
                case CHARACTER:
                case 39:
                case 43:
                case 46:
                case 47:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54: {
                    n = unary();
                    {
                        if ("" != null) return n;
                    }
                    break;
                }
                default:
                    jj_la1[11] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public ExprNode expr1() throws ParseException {
        ExprNode l, r;
        l = term();
        label_5:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 39:
                case 55:
                case 56: {
                    ;
                    break;
                }
                default:
                    jj_la1[12] = jj_gen;
                    break label_5;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 39: {
                    jj_consume_token(39);
                    r = term();
                    l = new BinaryOpNode(l, "*", r);
                    break;
                }
                case 55: {
                    jj_consume_token(55);
                    r = term();
                    l = new BinaryOpNode(l, "/", r);
                    break;
                }
                case 56: {
                    jj_consume_token(56);
                    r = term();
                    l = new BinaryOpNode(l, "%", r);
                    break;
                }
                default:
                    jj_la1[13] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if ("" != null) return l;
        }
        throw new Error("Missing return statement in function");
    }

    final public ExprNode expr2() throws ParseException {
        ExprNode l, r;
        l = expr1();
        label_6:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 50:
                case 51: {
                    ;
                    break;
                }
                default:
                    jj_la1[14] = jj_gen;
                    break label_6;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 50: {
                    jj_consume_token(50);
                    r = expr1();
                    l = new BinaryOpNode(l, "+", r);
                    break;
                }
                case 51: {
                    jj_consume_token(51);
                    r = expr1();
                    l = new BinaryOpNode(l, "-", r);
                    break;
                }
                default:
                    jj_la1[15] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if ("" != null) return l;
        }
        throw new Error("Missing return statement in function");
    }

    final public ExprNode expr3() throws ParseException {
        ExprNode l, r;
        l = expr2();
        label_7:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 57:
                case 58: {
                    ;
                    break;
                }
                default:
                    jj_la1[16] = jj_gen;
                    break label_7;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 57: {
                    jj_consume_token(57);
                    r = expr2();
                    l = new BinaryOpNode(l, "<<", r);
                    break;
                }
                case 58: {
                    jj_consume_token(58);
                    r = expr2();
                    l = new BinaryOpNode(l, ">>", r);
                    break;
                }
                default:
                    jj_la1[17] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if ("" != null) return l;
        }
        throw new Error("Missing return statement in function");
    }

    final public ExprNode expr4() throws ParseException {
        ExprNode l, r;
        l = expr3();
        label_8:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 54: {
                    ;
                    break;
                }
                default:
                    jj_la1[18] = jj_gen;
                    break label_8;
            }
            jj_consume_token(54);
            r = expr3();
            l = new BinaryOpNode(l, "&", r);
        }
        {
            if ("" != null) return l;
        }
        throw new Error("Missing return statement in function");
    }

    final public ExprNode expr5() throws ParseException {
        ExprNode l, r;
        l = expr4();
        label_9:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 59: {
                    ;
                    break;
                }
                default:
                    jj_la1[19] = jj_gen;
                    break label_9;
            }
            jj_consume_token(59);
            r = expr4();
            l = new BinaryOpNode(l, "^", r);
        }
        {
            if ("" != null) return l;
        }
        throw new Error("Missing return statement in function");
    }

    final public ExprNode expr6() throws ParseException {
        ExprNode l, r;
        l = expr5();
        label_10:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 60: {
                    ;
                    break;
                }
                default:
                    jj_la1[20] = jj_gen;
                    break label_10;
            }
            jj_consume_token(60);
            r = expr5();
            l = new BinaryOpNode(l, "|", r);
        }
        {
            if ("" != null) return l;
        }
        throw new Error("Missing return statement in function");
    }

    final public ExprNode expr7() throws ParseException {
        ExprNode l, r;
        l = expr6();
        label_11:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 61:
                case 62:
                case 63:
                case 64:
                case 65:
                case 66: {
                    ;
                    break;
                }
                default:
                    jj_la1[21] = jj_gen;
                    break label_11;
            }
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 61: {
                    jj_consume_token(61);
                    r = expr6();
                    l = new BinaryOpNode(l, ">", r);
                    break;
                }
                case 62: {
                    jj_consume_token(62);
                    r = expr6();
                    l = new BinaryOpNode(l, "<", r);
                    break;
                }
                case 63: {
                    jj_consume_token(63);
                    r = expr6();
                    l = new BinaryOpNode(l, ">=", r);
                    break;
                }
                case 64: {
                    jj_consume_token(64);
                    r = expr6();
                    l = new BinaryOpNode(l, "<=", r);
                    break;
                }
                case 65: {
                    jj_consume_token(65);
                    r = expr6();
                    l = new BinaryOpNode(l, "==", r);
                    break;
                }
                case 66: {
                    jj_consume_token(66);
                    r = expr6();
                    l = new BinaryOpNode(l, "!=", r);
                    break;
                }
                default:
                    jj_la1[22] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        {
            if ("" != null) return l;
        }
        throw new Error("Missing return statement in function");
    }

    final public ExprNode expr8() throws ParseException {
        ExprNode l, r;
        l = expr7();
        label_12:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 67: {
                    ;
                    break;
                }
                default:
                    jj_la1[23] = jj_gen;
                    break label_12;
            }
            jj_consume_token(67);
            r = expr7();
            l = new LogicalAndNode(l, r);
        }
        {
            if ("" != null) return l;
        }
        throw new Error("Missing return statement in function");
    }

    final public ExprNode expr9() throws ParseException {
        ExprNode l, r;
        l = expr8();
        label_13:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 68: {
                    ;
                    break;
                }
                default:
                    jj_la1[24] = jj_gen;
                    break label_13;
            }
            jj_consume_token(68);
            r = expr7();
            l = new LogicalOrNode(l, r);
        }
        {
            if ("" != null) return l;
        }
        throw new Error("Missing return statement in function");
    }

    final public ExprNode expr10() throws ParseException {
        ExprNode c, t, e;
        c = expr9();
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case 69: {
                jj_consume_token(69);
                t = expr();
                jj_consume_token(70);
                e = expr10();
                {
                    if ("" != null) return new CondExprNode(c, t, e);
                }
                break;
            }
            default:
                jj_la1[25] = jj_gen;
                ;
        }
        {
            if ("" != null) return c;
        }
        throw new Error("Missing return statement in function");
    }

    final public String assignOp() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case 71: {
                jj_consume_token(71);
                {
                    if ("" != null) return "+";
                }
                break;
            }
            case 72: {
                jj_consume_token(72);
                {
                    if ("" != null) return "-";
                }
                break;
            }
            case 73: {
                jj_consume_token(73);
                {
                    if ("" != null) return "*";
                }
                break;
            }
            case 74: {
                jj_consume_token(74);
                {
                    if ("" != null) return "/";
                }
                break;
            }
            case 75: {
                jj_consume_token(75);
                {
                    if ("" != null) return "%";
                }
                break;
            }
            case 76: {
                jj_consume_token(76);
                {
                    if ("" != null) return "^";
                }
                break;
            }
            case 77: {
                jj_consume_token(77);
                {
                    if ("" != null) return "&";
                }
                break;
            }
            case 78: {
                jj_consume_token(78);
                {
                    if ("" != null) return "|";
                }
                break;
            }
            case 79: {
                jj_consume_token(79);
                {
                    if ("" != null) return "<<";
                }
                break;
            }
            case 80: {
                jj_consume_token(80);
                {
                    if ("" != null) return ">>";
                }
                break;
            }
            default:
                jj_la1[26] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public ExprNode expr() throws ParseException {
        ExprNode expr, left, right;
        String op;
        if (jj_2_8(2147483647)) {
            left = term();
            jj_consume_token(81);
            right = expr();
            {
                if ("" != null) return new AssignNode(left, right);
            }
        } else if (jj_2_9(2147483647)) {
            left = term();
            op = assignOp();
            right = expr();
            {
                if ("" != null) return new OpAssignNode(left, op, right);
            }
        } else {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case SIZEOF:
                case INTEGER:
                case IDENTIFIER:
                case STRING:
                case CHARACTER:
                case 39:
                case 43:
                case 46:
                case 47:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54: {
                    expr = expr10();
                    {
                        if ("" != null) return expr;
                    }
                    break;
                }
                default:
                    jj_la1[27] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public IfNode ifStmt() throws ParseException {
        ExprNode cond;
        StmtNode thenBody = null, elseBody = null;
        Token t;
        t = jj_consume_token(IF);
        jj_consume_token(43);
        cond = expr();
        jj_consume_token(44);
        thenBody = stmt();
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case ELSE: {
                jj_consume_token(ELSE);
                elseBody = stmt();
                break;
            }
            default:
                jj_la1[28] = jj_gen;
                ;
        }
        {
            if ("" != null) return new IfNode(location(t), cond, thenBody, elseBody);
        }
        throw new Error("Missing return statement in function");
    }

    final public WhileNode whileStmt() throws ParseException {
        ExprNode cond;
        StmtNode body = null;
        Token t;
        t = jj_consume_token(WHILE);
        jj_consume_token(43);
        cond = expr();
        jj_consume_token(44);
        body = stmt();
        {
            if ("" != null) return new WhileNode(location(t), cond, body);
        }
        throw new Error("Missing return statement in function");
    }

    final public ForNode forStmt() throws ParseException {
        ExprNode start = null, end = null, step = null;
        StmtNode body = null;
        Token t;
        t = jj_consume_token(FOR);
        jj_consume_token(43);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case SIZEOF:
            case INTEGER:
            case IDENTIFIER:
            case STRING:
            case CHARACTER:
            case 39:
            case 43:
            case 46:
            case 47:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54: {
                start = expr();
                break;
            }
            default:
                jj_la1[29] = jj_gen;
                ;
        }
        jj_consume_token(40);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case SIZEOF:
            case INTEGER:
            case IDENTIFIER:
            case STRING:
            case CHARACTER:
            case 39:
            case 43:
            case 46:
            case 47:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54: {
                end = expr();
                break;
            }
            default:
                jj_la1[30] = jj_gen;
                ;
        }
        jj_consume_token(40);
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case SIZEOF:
            case INTEGER:
            case IDENTIFIER:
            case STRING:
            case CHARACTER:
            case 39:
            case 43:
            case 46:
            case 47:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54: {
                step = expr();
                break;
            }
            default:
                jj_la1[31] = jj_gen;
                ;
        }
        jj_consume_token(44);
        body = stmt();
        {
            if ("" != null) return new ForNode(location(t), start, end, step, body);
        }
        throw new Error("Missing return statement in function");
    }

    final public BlockNode block() throws ParseException {
        List<StmtNode> stmts;
        List<DefinedVariable> vars;
        Token t;
        t = jj_consume_token(41);
        vars = defvarList();
        stmts = stmts();
        jj_consume_token(42);
        {
            if ("" != null) return new BlockNode(location(t), vars, stmts);
        }
        throw new Error("Missing return statement in function");
    }

    final public ReturnNode retStmt() throws ParseException {
        ExprNode e;
        Token t;
        t = jj_consume_token(RETURN);
        e = expr();
        jj_consume_token(40);
        {
            if ("" != null) return new ReturnNode(location(t), e);
        }
        throw new Error("Missing return statement in function");
    }

    final public BreakNode breakStmt() throws ParseException {
        Token t;
        t = jj_consume_token(BREAK);
        jj_consume_token(40);
        {
            if ("" != null) return new BreakNode(location(t));
        }
        throw new Error("Missing return statement in function");
    }

    final public ContinueNode continueStmt() throws ParseException {
        Token t;
        t = jj_consume_token(CONTINUE);
        jj_consume_token(40);
        {
            if ("" != null) return new ContinueNode(location(t));
        }
        throw new Error("Missing return statement in function");
    }

    final public StmtNode stmt() throws ParseException {
        ExprNode e;
        StmtNode s;
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case SIZEOF:
            case INTEGER:
            case IDENTIFIER:
            case STRING:
            case CHARACTER:
            case 39:
            case 43:
            case 46:
            case 47:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54: {
                e = expr();
                jj_consume_token(40);
                {
                    if ("" != null) return new ExprStmtNode(e);
                }
                break;
            }
            case IF: {
                s = ifStmt();
                {
                    if ("" != null) return s;
                }
                break;
            }
            case WHILE: {
                s = whileStmt();
                {
                    if ("" != null) return s;
                }
                break;
            }
            case FOR: {
                s = forStmt();
                {
                    if ("" != null) return s;
                }
                break;
            }
            case 41: {
                s = block();
                {
                    if ("" != null) return s;
                }
                break;
            }
            case RETURN: {
                s = retStmt();
                {
                    if ("" != null) return s;
                }
                break;
            }
            case BREAK: {
                s = breakStmt();
                {
                    if ("" != null) return s;
                }
                break;
            }
            case CONTINUE: {
                s = continueStmt();
                {
                    if ("" != null) return s;
                }
                break;
            }
            default:
                jj_la1[32] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
        throw new Error("Missing return statement in function");
    }

    final public List<StmtNode> stmts() throws ParseException {
        List<StmtNode> stmts = new ArrayList<>();
        StmtNode stmt;
        label_14:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case IF:
                case WHILE:
                case FOR:
                case SIZEOF:
                case RETURN:
                case BREAK:
                case CONTINUE:
                case INTEGER:
                case IDENTIFIER:
                case STRING:
                case CHARACTER:
                case 39:
                case 41:
                case 43:
                case 46:
                case 47:
                case 50:
                case 51:
                case 52:
                case 53:
                case 54: {
                    ;
                    break;
                }
                default:
                    jj_la1[33] = jj_gen;
                    break label_14;
            }
            stmt = stmt();
            if (stmt != null) stmts.add(stmt);
        }
        {
            if ("" != null) return stmts;
        }
        throw new Error("Missing return statement in function");
    }

    final public boolean storage() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case STATIC: {
                jj_consume_token(STATIC);
                {
                    if ("" != null) return true;
                }
                break;
            }
            default:
                jj_la1[34] = jj_gen;
                ;
        }
        {
            if ("" != null) return false;
        }
        throw new Error("Missing return statement in function");
    }

    final public List<DefinedVariable> defVars() throws ParseException {
        List<DefinedVariable> defs = new ArrayList<>();
        boolean priv;
        TypeNode type;
        String name;
        ExprNode init = null;
        priv = storage();
        type = type();
        name = name();
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case 81: {
                jj_consume_token(81);
                init = expr();
                break;
            }
            default:
                jj_la1[35] = jj_gen;
                ;
        }
        defs.add(new DefinedVariable(priv, type, name, init));
        init = null;
        label_15:
        while (true) {
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 45: {
                    ;
                    break;
                }
                default:
                    jj_la1[36] = jj_gen;
                    break label_15;
            }
            jj_consume_token(45);
            name = name();
            switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                case 81: {
                    jj_consume_token(81);
                    init = expr();
                    break;
                }
                default:
                    jj_la1[37] = jj_gen;
                    ;
            }
            defs.add(new DefinedVariable(priv, type, name, init));
            init = null;
        }
        jj_consume_token(40);
        {
            if ("" != null) return defs;
        }
        throw new Error("Missing return statement in function");
    }

    final public List<DefinedVariable> defvarList() throws ParseException {
        List<DefinedVariable> result = new ArrayList<>();
        List<DefinedVariable> vars;
        label_16:
        while (true) {
            if (jj_2_10(1)) {
                ;
            } else {
                break label_16;
            }
            vars = defVars();
            result.addAll(vars);
        }
        {
            if ("" != null) return result;
        }
        throw new Error("Missing return statement in function");
    }

    final public Parameter param() throws ParseException {
        String name;
        TypeNode type;
        type = type();
        name = name();
        {
            if ("" != null) return new Parameter(type, name);
        }
        throw new Error("Missing return statement in function");
    }

    final public Params fixedParams() throws ParseException {
        List<Parameter> params = new ArrayList<>();
        Parameter param, param1;
        param1 = param();
        params.add(param1);
        label_17:
        while (true) {
            if (jj_2_11(2)) {
                ;
            } else {
                break label_17;
            }
            jj_consume_token(45);
            param = param();
            params.add(param);
        }
        {
            if ("" != null) return new Params(param1.getLocation(), params);
        }
        throw new Error("Missing return statement in function");
    }

    final public Params params() throws ParseException {
        Params params;
        params = fixedParams();
        switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
            case 45: {
                jj_consume_token(45);
                jj_consume_token(82);
                params.acceptVarargs();
                break;
            }
            default:
                jj_la1[38] = jj_gen;
                ;
        }
        {
            if ("" != null) return params;
        }
        throw new Error("Missing return statement in function");
    }

    final public DefinedFunction defFun() throws ParseException {
        boolean isPrivate;
        TypeNode type;
        String name;
        Params params = null;
        BlockNode body;
        boolean hasParam = false;
        isPrivate = storage();
        type = type();
        name = name();
        jj_consume_token(43);
        if (jj_2_12(1)) {
            params = params();
            hasParam = true;
        } else {
            ;
        }
        jj_consume_token(44);
        body = block();
        if (!hasParam) {
            params = new Params(type.getLocation(), new ArrayList<Parameter>());
        }
        TypeRef t = new FunctionTypeRef(type.getTypeRef(), params.getTypeRef());
        {
            if ("" != null) return new DefinedFunction(isPrivate, new TypeNode(t), name, params, body);
        }
        throw new Error("Missing return statement in function");
    }

    final public TypedefNode defTypedef() throws ParseException {
        Token t, name;
        TypeRef type;
        t = jj_consume_token(TYPEDEF);
        type = typeref();
        name = jj_consume_token(IDENTIFIER);
        jj_consume_token(40);
        addType(name.image);
        {
            if ("" != null) return new TypedefNode(location(t), type, name.image);
        }
        throw new Error("Missing return statement in function");
    }

    final public Declarations topDefs() throws ParseException {
        Declarations declarations = new Declarations();
        DefinedFunction defun;
        List<DefinedVariable> defvars;
        StructNode defStruct;
        TypedefNode defTypedef;
        label_18:
        while (true) {
            if (jj_2_13(1)) {
                ;
            } else {
                break label_18;
            }
            if (jj_2_14(2147483647)) {
                defun = defFun();
                declarations.addDefFun(defun);
            } else if (jj_2_15(3)) {
                defvars = defVars();
                declarations.addDefVars(defvars);
            } else {
                switch ((jj_ntk == -1) ? jj_ntk_f() : jj_ntk) {
                    case STRUCT: {
                        defStruct = defstruct();
                        declarations.addDefStruct(defStruct);
                        break;
                    }
                    case TYPEDEF: {
                        defTypedef = defTypedef();
                        declarations.addDefTypedef(defTypedef);
                        break;
                    }
                    default:
                        jj_la1[39] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        }
        {
            if ("" != null) return declarations;
        }
        throw new Error("Missing return statement in function");
    }

    final public AST compilationUnit() throws ParseException {
        Token t;
        Declarations declarations;
        t = getToken(1);
        declarations = topDefs();
        jj_consume_token(0);
        {
            if ("" != null) return new AST(location(t), declarations);
        }
        throw new Error("Missing return statement in function");
    }

    private boolean jj_2_1(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_1());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(0, xla);
        }
    }

    private boolean jj_2_2(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_2());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(1, xla);
        }
    }

    private boolean jj_2_3(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_3());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(2, xla);
        }
    }

    private boolean jj_2_4(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_4());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(3, xla);
        }
    }

    private boolean jj_2_5(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_5());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(4, xla);
        }
    }

    private boolean jj_2_6(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_6());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(5, xla);
        }
    }

    private boolean jj_2_7(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_7());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(6, xla);
        }
    }

    private boolean jj_2_8(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_8());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(7, xla);
        }
    }

    private boolean jj_2_9(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_9());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(8, xla);
        }
    }

    private boolean jj_2_10(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_10());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(9, xla);
        }
    }

    private boolean jj_2_11(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_11());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(10, xla);
        }
    }

    private boolean jj_2_12(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_12());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(11, xla);
        }
    }

    private boolean jj_2_13(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_13());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(12, xla);
        }
    }

    private boolean jj_2_14(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_14());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(13, xla);
        }
    }

    private boolean jj_2_15(int xla) {
        jj_la = xla;
        jj_lastpos = jj_scanpos = token;
        try {
            return (!jj_3_15());
        } catch (LookaheadSuccess ls) {
            return true;
        } finally {
            jj_save(14, xla);
        }
    }

    private boolean jj_3R_99() {
        if (jj_scan_token(68)) return true;
        if (jj_3R_100()) return true;
        return false;
    }

    private boolean jj_3R_22() {
        Token xsp;
        xsp = jj_scanpos;
        if (!jj_3R_33()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_34()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_35()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_36()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_37()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_38()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_39()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_40()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_41()) return false;
        jj_scanpos = xsp;
        if (jj_3R_42()) return true;
        return false;
    }

    private boolean jj_3R_30() {
        if (jj_3R_48()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_49()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_101() {
        if (jj_scan_token(67)) return true;
        if (jj_3R_100()) return true;
        return false;
    }

    private boolean jj_3R_94() {
        if (jj_3R_96()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_97()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_61() {
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_60() {
        if (jj_scan_token(STRUCT)) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_59() {
        if (jj_scan_token(UNSIGNED)) return true;
        if (jj_scan_token(LONG)) return true;
        return false;
    }

    private boolean jj_3R_46() {
        if (jj_scan_token(TYPEDEF)) return true;
        return false;
    }

    private boolean jj_3_3() {
        if (jj_scan_token(UNSIGNED)) return true;
        if (jj_scan_token(INT)) return true;
        return false;
    }

    private boolean jj_3R_96() {
        if (jj_3R_98()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_99()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_2() {
        if (jj_scan_token(UNSIGNED)) return true;
        if (jj_scan_token(SHORT)) return true;
        return false;
    }

    private boolean jj_3_1() {
        if (jj_scan_token(UNSIGNED)) return true;
        if (jj_scan_token(CHAR)) return true;
        return false;
    }

    private boolean jj_3R_58() {
        if (jj_scan_token(LONG)) return true;
        return false;
    }

    private boolean jj_3R_57() {
        if (jj_scan_token(INT)) return true;
        return false;
    }

    private boolean jj_3R_56() {
        if (jj_scan_token(SHORT)) return true;
        return false;
    }

    private boolean jj_3R_55() {
        if (jj_scan_token(CHAR)) return true;
        return false;
    }

    private boolean jj_3R_111() {
        if (jj_scan_token(66)) return true;
        if (jj_3R_102()) return true;
        return false;
    }

    private boolean jj_3R_98() {
        if (jj_3R_100()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_101()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_48() {
        Token xsp;
        xsp = jj_scanpos;
        if (!jj_3R_54()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_55()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_56()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_57()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_58()) return false;
        jj_scanpos = xsp;
        if (!jj_3_1()) return false;
        jj_scanpos = xsp;
        if (!jj_3_2()) return false;
        jj_scanpos = xsp;
        if (!jj_3_3()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_59()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_60()) return false;
        jj_scanpos = xsp;
        jj_lookingAhead = true;
        jj_semLA = isType(getToken(1).image);
        jj_lookingAhead = false;
        if (!jj_semLA || jj_3R_61()) return true;
        return false;
    }

    private boolean jj_3R_54() {
        if (jj_scan_token(VOID)) return true;
        return false;
    }

    private boolean jj_3R_110() {
        if (jj_scan_token(65)) return true;
        if (jj_3R_102()) return true;
        return false;
    }

    private boolean jj_3R_109() {
        if (jj_scan_token(64)) return true;
        if (jj_3R_102()) return true;
        return false;
    }

    private boolean jj_3R_108() {
        if (jj_scan_token(63)) return true;
        if (jj_3R_102()) return true;
        return false;
    }

    private boolean jj_3R_107() {
        if (jj_scan_token(62)) return true;
        if (jj_3R_102()) return true;
        return false;
    }

    private boolean jj_3R_106() {
        if (jj_scan_token(61)) return true;
        if (jj_3R_102()) return true;
        return false;
    }

    private boolean jj_3R_103() {
        Token xsp;
        xsp = jj_scanpos;
        if (!jj_3R_106()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_107()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_108()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_109()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_110()) return false;
        jj_scanpos = xsp;
        if (jj_3R_111()) return true;
        return false;
    }

    private boolean jj_3R_44() {
        if (jj_3R_29()) return true;
        if (jj_3R_20()) return true;
        return false;
    }

    private boolean jj_3R_105() {
        if (jj_scan_token(60)) return true;
        if (jj_3R_104()) return true;
        return false;
    }

    private boolean jj_3R_51() {
        if (jj_scan_token(81)) return true;
        return false;
    }

    private boolean jj_3R_50() {
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_113() {
        if (jj_scan_token(59)) return true;
        if (jj_3R_112()) return true;
        return false;
    }

    private boolean jj_3R_100() {
        if (jj_3R_102()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_103()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_25() {
        if (jj_3R_43()) return true;
        return false;
    }

    private boolean jj_3R_115() {
        if (jj_scan_token(54)) return true;
        if (jj_3R_114()) return true;
        return false;
    }

    private boolean jj_3R_102() {
        if (jj_3R_104()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_105()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3_11() {
        if (jj_scan_token(45)) return true;
        if (jj_3R_24()) return true;
        return false;
    }

    private boolean jj_3R_104() {
        if (jj_3R_112()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_113()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_43() {
        if (jj_3R_24()) return true;
        return false;
    }

    private boolean jj_3R_121() {
        if (jj_scan_token(58)) return true;
        if (jj_3R_116()) return true;
        return false;
    }

    private boolean jj_3R_120() {
        if (jj_scan_token(57)) return true;
        if (jj_3R_116()) return true;
        return false;
    }

    private boolean jj_3R_117() {
        Token xsp;
        xsp = jj_scanpos;
        if (!jj_3R_120()) return false;
        jj_scanpos = xsp;
        if (jj_3R_121()) return true;
        return false;
    }

    private boolean jj_3R_112() {
        if (jj_3R_114()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_115()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_24() {
        if (jj_3R_20()) return true;
        return false;
    }

    private boolean jj_3R_124() {
        if (jj_scan_token(51)) return true;
        if (jj_3R_118()) return true;
        return false;
    }

    private boolean jj_3_10() {
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3R_123() {
        if (jj_scan_token(50)) return true;
        if (jj_3R_118()) return true;
        return false;
    }

    private boolean jj_3R_119() {
        Token xsp;
        xsp = jj_scanpos;
        if (!jj_3R_123()) return false;
        jj_scanpos = xsp;
        if (jj_3R_124()) return true;
        return false;
    }

    private boolean jj_3R_114() {
        if (jj_3R_116()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_117()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_52() {
        if (jj_scan_token(45)) return true;
        return false;
    }

    private boolean jj_3R_127() {
        if (jj_scan_token(56)) return true;
        if (jj_3R_21()) return true;
        return false;
    }

    private boolean jj_3R_126() {
        if (jj_scan_token(55)) return true;
        if (jj_3R_21()) return true;
        return false;
    }

    private boolean jj_3R_116() {
        if (jj_3R_118()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_119()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_125() {
        if (jj_scan_token(39)) return true;
        if (jj_3R_21()) return true;
        return false;
    }

    private boolean jj_3R_122() {
        Token xsp;
        xsp = jj_scanpos;
        if (!jj_3R_125()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_126()) return false;
        jj_scanpos = xsp;
        if (jj_3R_127()) return true;
        return false;
    }

    private boolean jj_3R_23() {
        if (jj_3R_29()) return true;
        if (jj_3R_20()) return true;
        if (jj_3R_50()) return true;
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_51()) jj_scanpos = xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_52()) {
                jj_scanpos = xsp;
                break;
            }
        }
        if (jj_scan_token(40)) return true;
        return false;
    }

    private boolean jj_3_7() {
        if (jj_scan_token(43)) return true;
        if (jj_3R_20()) return true;
        return false;
    }

    private boolean jj_3R_118() {
        if (jj_3R_21()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_122()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_32() {
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3R_47() {
        if (jj_scan_token(STATIC)) return true;
        return false;
    }

    private boolean jj_3R_31() {
        if (jj_scan_token(43)) return true;
        if (jj_3R_20()) return true;
        if (jj_scan_token(44)) return true;
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3R_21() {
        Token xsp;
        xsp = jj_scanpos;
        if (!jj_3R_31()) return false;
        jj_scanpos = xsp;
        if (jj_3R_32()) return true;
        return false;
    }

    private boolean jj_3R_73() {
        if (jj_3R_74()) return true;
        return false;
    }

    private boolean jj_3R_29() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_47()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_72() {
        if (jj_scan_token(SIZEOF)) return true;
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3_6() {
        if (jj_scan_token(SIZEOF)) return true;
        if (jj_scan_token(43)) return true;
        if (jj_3R_20()) return true;
        if (jj_scan_token(44)) return true;
        return false;
    }

    private boolean jj_3R_71() {
        if (jj_scan_token(54)) return true;
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3R_70() {
        if (jj_scan_token(39)) return true;
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3R_69() {
        if (jj_scan_token(53)) return true;
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3R_68() {
        if (jj_scan_token(52)) return true;
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3R_67() {
        if (jj_scan_token(51)) return true;
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3R_66() {
        if (jj_scan_token(50)) return true;
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3R_65() {
        if (jj_scan_token(47)) return true;
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3R_53() {
        Token xsp;
        xsp = jj_scanpos;
        if (!jj_3R_64()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_65()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_66()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_67()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_68()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_69()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_70()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_71()) return false;
        jj_scanpos = xsp;
        if (!jj_3_6()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_72()) return false;
        jj_scanpos = xsp;
        if (jj_3R_73()) return true;
        return false;
    }

    private boolean jj_3R_64() {
        if (jj_scan_token(46)) return true;
        if (jj_3R_53()) return true;
        return false;
    }

    private boolean jj_3R_87() {
        if (jj_scan_token(43)) return true;
        if (jj_3R_89()) return true;
        if (jj_scan_token(44)) return true;
        return false;
    }

    private boolean jj_3R_86() {
        if (jj_scan_token(49)) return true;
        if (jj_3R_50()) return true;
        return false;
    }

    private boolean jj_3R_85() {
        if (jj_scan_token(48)) return true;
        if (jj_3R_50()) return true;
        return false;
    }

    private boolean jj_3R_84() {
        if (jj_scan_token(37)) return true;
        if (jj_3R_88()) return true;
        if (jj_scan_token(38)) return true;
        return false;
    }

    private boolean jj_3R_83() {
        if (jj_scan_token(47)) return true;
        return false;
    }

    private boolean jj_3R_82() {
        if (jj_scan_token(46)) return true;
        return false;
    }

    private boolean jj_3R_76() {
        Token xsp;
        xsp = jj_scanpos;
        if (!jj_3R_82()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_83()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_84()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_85()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_86()) return false;
        jj_scanpos = xsp;
        if (jj_3R_87()) return true;
        return false;
    }

    private boolean jj_3R_74() {
        if (jj_3R_75()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_76()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_95() {
        if (jj_scan_token(45)) return true;
        if (jj_3R_88()) return true;
        return false;
    }

    private boolean jj_3R_93() {
        if (jj_3R_88()) return true;
        Token xsp;
        while (true) {
            xsp = jj_scanpos;
            if (jj_3R_95()) {
                jj_scanpos = xsp;
                break;
            }
        }
        return false;
    }

    private boolean jj_3R_89() {
        Token xsp;
        xsp = jj_scanpos;
        if (jj_3R_93()) jj_scanpos = xsp;
        return false;
    }

    private boolean jj_3R_81() {
        if (jj_scan_token(43)) return true;
        if (jj_3R_88()) return true;
        if (jj_scan_token(44)) return true;
        return false;
    }

    private boolean jj_3R_80() {
        if (jj_scan_token(IDENTIFIER)) return true;
        return false;
    }

    private boolean jj_3R_79() {
        if (jj_scan_token(CHARACTER)) return true;
        return false;
    }

    private boolean jj_3R_78() {
        if (jj_scan_token(STRING)) return true;
        return false;
    }

    private boolean jj_3R_77() {
        if (jj_scan_token(INTEGER)) return true;
        return false;
    }

    private boolean jj_3R_75() {
        Token xsp;
        xsp = jj_scanpos;
        if (!jj_3R_77()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_78()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_79()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_80()) return false;
        jj_scanpos = xsp;
        if (jj_3R_81()) return true;
        return false;
    }

    private boolean jj_3_9() {
        if (jj_3R_21()) return true;
        if (jj_3R_22()) return true;
        return false;
    }

    private boolean jj_3R_45() {
        if (jj_scan_token(STRUCT)) return true;
        return false;
    }

    private boolean jj_3_12() {
        if (jj_3R_25()) return true;
        return false;
    }

    private boolean jj_3_8() {
        if (jj_3R_21()) return true;
        if (jj_scan_token(81)) return true;
        return false;
    }

    private boolean jj_3_5() {
        if (jj_3R_19()) return true;
        return false;
    }

    private boolean jj_3R_92() {
        if (jj_3R_94()) return true;
        return false;
    }

    private boolean jj_3R_91() {
        if (jj_3R_21()) return true;
        if (jj_3R_22()) return true;
        if (jj_3R_88()) return true;
        return false;
    }

    private boolean jj_3_14() {
        if (jj_3R_29()) return true;
        if (jj_3R_30()) return true;
        if (jj_scan_token(IDENTIFIER)) return true;
        if (jj_scan_token(43)) return true;
        return false;
    }

    private boolean jj_3R_90() {
        if (jj_3R_21()) return true;
        if (jj_scan_token(81)) return true;
        if (jj_3R_88()) return true;
        return false;
    }

    private boolean jj_3R_88() {
        Token xsp;
        xsp = jj_scanpos;
        if (!jj_3R_90()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_91()) return false;
        jj_scanpos = xsp;
        if (jj_3R_92()) return true;
        return false;
    }

    private boolean jj_3R_42() {
        if (jj_scan_token(80)) return true;
        return false;
    }

    private boolean jj_3R_28() {
        if (jj_3R_46()) return true;
        return false;
    }

    private boolean jj_3R_41() {
        if (jj_scan_token(79)) return true;
        return false;
    }

    private boolean jj_3R_27() {
        if (jj_3R_45()) return true;
        return false;
    }

    private boolean jj_3R_19() {
        if (jj_3R_20()) return true;
        return false;
    }

    private boolean jj_3R_40() {
        if (jj_scan_token(78)) return true;
        return false;
    }

    private boolean jj_3R_39() {
        if (jj_scan_token(77)) return true;
        return false;
    }

    private boolean jj_3_15() {
        if (jj_3R_23()) return true;
        return false;
    }

    private boolean jj_3R_38() {
        if (jj_scan_token(76)) return true;
        return false;
    }

    private boolean jj_3R_37() {
        if (jj_scan_token(75)) return true;
        return false;
    }

    private boolean jj_3R_26() {
        if (jj_3R_44()) return true;
        return false;
    }

    private boolean jj_3_13() {
        Token xsp;
        xsp = jj_scanpos;
        if (!jj_3R_26()) return false;
        jj_scanpos = xsp;
        if (!jj_3_15()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_27()) return false;
        jj_scanpos = xsp;
        if (jj_3R_28()) return true;
        return false;
    }

    private boolean jj_3R_36() {
        if (jj_scan_token(74)) return true;
        return false;
    }

    private boolean jj_3R_35() {
        if (jj_scan_token(73)) return true;
        return false;
    }

    private boolean jj_3R_63() {
        if (jj_scan_token(39)) return true;
        return false;
    }

    private boolean jj_3R_34() {
        if (jj_scan_token(72)) return true;
        return false;
    }

    private boolean jj_3R_20() {
        if (jj_3R_30()) return true;
        return false;
    }

    private boolean jj_3R_62() {
        if (jj_scan_token(37)) return true;
        if (jj_scan_token(INTEGER)) return true;
        if (jj_scan_token(38)) return true;
        return false;
    }

    private boolean jj_3R_33() {
        if (jj_scan_token(71)) return true;
        return false;
    }

    private boolean jj_3_4() {
        if (jj_scan_token(37)) return true;
        if (jj_scan_token(38)) return true;
        return false;
    }

    private boolean jj_3R_49() {
        Token xsp;
        xsp = jj_scanpos;
        if (!jj_3_4()) return false;
        jj_scanpos = xsp;
        if (!jj_3R_62()) return false;
        jj_scanpos = xsp;
        if (jj_3R_63()) return true;
        return false;
    }

    private boolean jj_3R_97() {
        if (jj_scan_token(69)) return true;
        if (jj_3R_88()) return true;
        if (jj_scan_token(70)) return true;
        if (jj_3R_94()) return true;
        return false;
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream) {
        ReInit(stream, null);
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.InputStream stream, String encoding) {
        try {
            jj_input_stream.ReInit(stream, encoding, 1, 1);
        } catch (java.io.UnsupportedEncodingException e) {
            throw new RuntimeException(e);
        }
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 40; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(java.io.Reader stream) {
        if (jj_input_stream == null) {
            jj_input_stream = new SimpleCharStream(stream, 1, 1);
        } else {
            jj_input_stream.ReInit(stream, 1, 1);
        }
        if (token_source == null) {
            token_source = new ParserTokenManager(jj_input_stream);
        }

        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 40; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    /**
     * Reinitialise.
     */
    public void ReInit(ParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 40; i++) jj_la1[i] = -1;
        for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
    }

    private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            if (++jj_gc > 100) {
                jj_gc = 0;
                for (int i = 0; i < jj_2_rtns.length; i++) {
                    JJCalls c = jj_2_rtns[i];
                    while (c != null) {
                        if (c.gen < jj_gen) c.first = null;
                        c = c.next;
                    }
                }
            }
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    private boolean jj_scan_token(int kind) {
        if (jj_scanpos == jj_lastpos) {
            jj_la--;
            if (jj_scanpos.next == null) {
                jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
            } else {
                jj_lastpos = jj_scanpos = jj_scanpos.next;
            }
        } else {
            jj_scanpos = jj_scanpos.next;
        }
        if (jj_rescan) {
            int i = 0;
            Token tok = token;
            while (tok != null && tok != jj_scanpos) {
                i++;
                tok = tok.next;
            }
            if (tok != null) jj_add_error_token(kind, i);
        }
        if (jj_scanpos.kind != kind) return true;
        if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
        return false;
    }

    /**
     * Get the next Token.
     */
    final public Token getNextToken() {
        if (token.next != null) token = token.next;
        else token = token.next = token_source.getNextToken();
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    /**
     * Get the specific Token.
     */
    final public Token getToken(int index) {
        Token t = jj_lookingAhead ? jj_scanpos : token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) t = t.next;
            else t = t.next = token_source.getNextToken();
        }
        return t;
    }

    private int jj_ntk_f() {
        if ((jj_nt = token.next) == null)
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        else
            return (jj_ntk = jj_nt.kind);
    }

    private void jj_add_error_token(int kind, int pos) {
        if (pos >= 100) {
            return;
        }

        if (pos == jj_endpos + 1) {
            jj_lasttokens[jj_endpos++] = kind;
        } else if (jj_endpos != 0) {
            jj_expentry = new int[jj_endpos];

            for (int i = 0; i < jj_endpos; i++) {
                jj_expentry[i] = jj_lasttokens[i];
            }

            for (int[] oldentry : jj_expentries) {
                if (oldentry.length == jj_expentry.length) {
                    boolean isMatched = true;

                    for (int i = 0; i < jj_expentry.length; i++) {
                        if (oldentry[i] != jj_expentry[i]) {
                            isMatched = false;
                            break;
                        }

                    }
                    if (isMatched) {
                        jj_expentries.add(jj_expentry);
                        break;
                    }
                }
            }

            if (pos != 0) {
                jj_lasttokens[(jj_endpos = pos) - 1] = kind;
            }
        }
    }

    /**
     * Generate ParseException.
     */
    public ParseException generateParseException() {
        jj_expentries.clear();
        boolean[] la1tokens = new boolean[83];
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 40; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                    if ((jj_la1_2[i] & (1 << j)) != 0) {
                        la1tokens[64 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 83; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.add(jj_expentry);
            }
        }
        jj_endpos = 0;
        jj_rescan_token();
        jj_add_error_token(0, 0);
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = jj_expentries.get(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    /**
     * Trace enabled.
     */
    final public boolean trace_enabled() {
        return trace_enabled;
    }

    /**
     * Enable tracing.
     */
    final public void enable_tracing() {
    }

    /**
     * Disable tracing.
     */
    final public void disable_tracing() {
    }

    private void jj_rescan_token() {
        jj_rescan = true;
        for (int i = 0; i < 15; i++) {
            try {
                JJCalls p = jj_2_rtns[i];

                do {
                    if (p.gen > jj_gen) {
                        jj_la = p.arg;
                        jj_lastpos = jj_scanpos = p.first;
                        switch (i) {
                            case 0:
                                jj_3_1();
                                break;
                            case 1:
                                jj_3_2();
                                break;
                            case 2:
                                jj_3_3();
                                break;
                            case 3:
                                jj_3_4();
                                break;
                            case 4:
                                jj_3_5();
                                break;
                            case 5:
                                jj_3_6();
                                break;
                            case 6:
                                jj_3_7();
                                break;
                            case 7:
                                jj_3_8();
                                break;
                            case 8:
                                jj_3_9();
                                break;
                            case 9:
                                jj_3_10();
                                break;
                            case 10:
                                jj_3_11();
                                break;
                            case 11:
                                jj_3_12();
                                break;
                            case 12:
                                jj_3_13();
                                break;
                            case 13:
                                jj_3_14();
                                break;
                            case 14:
                                jj_3_15();
                                break;
                        }
                    }
                    p = p.next;
                } while (p != null);

            } catch (LookaheadSuccess ls) {
            }
        }
        jj_rescan = false;
    }

    private void jj_save(int index, int xla) {
        JJCalls p = jj_2_rtns[index];
        while (p.gen > jj_gen) {
            if (p.next == null) {
                p = p.next = new JJCalls();
                break;
            }
            p = p.next;
        }

        p.gen = jj_gen + xla - jj_la;
        p.first = token;
        p.arg = xla;
    }

    @SuppressWarnings("serial")
    static private final class LookaheadSuccess extends java.lang.Error {
        @Override
        public Throwable fillInStackTrace() {
            return this;
        }
    }

    static final class JJCalls {
        int gen;
        Token first;
        int arg;
        JJCalls next;
    }

}
